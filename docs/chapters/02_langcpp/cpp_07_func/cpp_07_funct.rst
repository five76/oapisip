Функции
~~~~~~~~~~~~~~

Функция (в программировании) — это фрагмент кода или алгоритм, реализованный на каком-либо языке программирования, с целью выполнения определённой последовательности операций. 

Фун­кция является основной программной единицей в Си, минималь­ным исполняемым программным модулем. Всякая программа обязательно включает в себя основную функцию с именем **main**. Если в программе используются и другие функции, то они вы­полняют роль подпрограмм. Рассмотрим пример. Требуется составить программу нахожде­ния наибольшего значения из трех величин — max (a, Ь, с). Для ее решения можно использовать вспомогательный алгоритм нахож­дения максимального значения из двух, поскольку справедливо равенство: max (a, b, с) = max (max (a, b), с):

.. code-block:: cpp

	#include <iostream>
	using namespace std;

	//Определение вспомогательной функции
	int MAX(int x, int y)
	{ 
	    if (x>y) 
	    {
		return x;
	    }
	else 
	    {
		return y;
	    }
	}

	//Основная функция
	int main()
	{
	    int a,b,c,d;
	    cout<<"Bведите a,b,c:";
	    cin>>a>>b>>c;
	    d=MAX(MAX(a,b),c);
	    cout<<"\nmax (a, b, c) = "<<d<<endl;
	    return 0;
	}

Формат определения функции
""""""""""""""""""""""""""""""

Формат определения функции следующий: 

.. code-block:: cpp

	*тип* **имя_функции** *(спецификация_параметров) *
	{
		**тело_ функции**
	} 

*Тип функции* — это тип возвращаемого функцией результата. Если функция не возвращает никакого результата, то для нее ука­зывается тип **void**. 

*Имя функции* — идентификатор, задаваемый программистом или **main** для основной функции. 

*Спецификации параметров* — это либо «пусто», либо список имен формальных параметров функции с указанием типа для каждого из них. 

*Тело функции* — это либо составной оператор, либо блок. Признаком блока является наличие описаний программных объектов (пере­менных, массивов и т.д.), которые действуют в пределах этого блока. Блок, как и составной оператор, ограничивается фигурны­ми скобками. 

.. note::В Си действует правило: тело функции не может содержать в себе определения других функций. Иначе говоря, недопустимы внут­ренние функции. 

Из всякой функции возможно обращение к другим функциям, однако они всегда яв­ляются внешними по отношению к вызывающей. Оператором возврата из функции в точку ее вызова является опе­ратор **return**. Он может использоваться в функциях в двух формах: 

**return;** или **return выражение;**

В первом случае функция не возвращает никакого значения в ка­честве своего результата. Во втором случае результатом функции яв­ляется значение указанного выражения. Тип этого выражения дол­жен либо совпадать с типом функции, либо относиться к числу ти­пов, допускающих автоматическое преобразование к типу функции. Оператор **return** может в явном виде отсутствовать в теле фун­кции. В таком случае его присутствие подразумевается перед зак­рывающей тело функции фигурной скобкой. Такая подстановка производится компилятором. 

Формат обращения к функции (вызова функции) традици­онный: 

имя_функции(список_фактических_праметров) 

Обращение к функции — это выражение. В этом выражении круг­лые скобки играют роль знака операции, для которой функция и фактические параметры (аргументы) являются операндами. Приори­тет операции «скобки» самый высокий, поэтому вычис­ление функции в выражениях производится раньше других операций.

Между формальными и фактическими параметрами при вызо­ве функции должны соблюдаться правила соответствия *по после­довательности* и *по типам*. 

Фактический параметр — это выраже­ние того же типа, что и у соответствующего ему формального параметра. Необходимо строго следовать принципу соот­ветствия типов. 

.. attention:: Передача параметров при вызове функции происхо­дит только по значению. В Си допустимы только параметры-значения. Поэтому выполнение функции не может изменить значения переменных, указанных в качестве фактических параметров. 

Прототип функции 
"""""""""""""""""

Полное определение функции **МАХ ()** перед основной частью программы необязательно. Вот другой вариант программы, решающей ту же самую задачу.

.. code-block:: cpp

	#include <iostream>
	using namespace std;

	//Прототип функции МАХ
	int MAX(int, int);

	//Основная функция
	int main()
	{
	    int a,b,c,d;
	    cout<<"Bведите a,b,c:";
	    cin>>a>>b>>c;
	    d=MAX(MAX(a,b),c);
	    cout<<"\nmax (a, b, c) = "<<d ;
	    return 0;
	}

	//Определение вспомогательной функции
	int MAX(int x, int y)
	{ 
	    if (x>y) 
	    {
		return x;
	    }
	else 
	    {
		return y;
	    }
	}
