Для программирования ветвящихся алгоритмов в языке Си/Си++ имеется несколько различных средств:

* операция условия ?:
* условный оператор if 
* оператор выбора switch.

Условный оператор
-----------------

**Формат условного оператора:**

**if** (*выражение*) оператор1; **else** оператор2;

Это полная форма оператора, программирующая структуру пол­ного ветвления. Обычно выражение — это некоторое условие, со­держащее операции отношения и логические операции. Значение выражения приводится к целому и интерпретируется в соответ­ствии с правилом: равно нулю — ложь, не равно нулю — истина.

Если выражение истинно, выполняется оператор1, если ложно — оператор2.

.. attention ::  выражение записывается в круглых скобках; <br> точка с запятой после оператора 1 ставится обязательно.

Возможно использование неполной формы условного опера­тора:

if (выражение) оператор;
Пример использования полной формы условного операто­ра для нахождения большего значения из двух переменных а и b:

::

	if(a>b) 
	{
		max=a; 
	}
	else 
	{
		max=b;
	}	

Примеры программирования вложенных ветвящихся структур. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Требуется вычислить функцию sign(x) — знак х,которая определена следующим образом:

.. figure:: 04_if_sign.png
       :scale: 100 %
       :align: center
       :alt: asda
       
Пример 1. Алгоритм с полными вложенными ветвлениями:

.. figure:: 04_if_01.png
       :scale: 100 %
       :align: center
       :alt: asda

::

	if(х<=0)
		if(x==0)
			y=0;
		else
			у=-1;
	else
		у=1;

Пример 2. Алгоритм с полными вложенными ветвлениями:

.. figure:: 04_if_02.png
       :scale: 100 %
       :align: center
       :alt: asda

::

	y = 1;
	if (x<=0)
		if(x==0)
			y=0;
		else
			y=-1

Пример 3. Упорядочить по возрастанию значения в двух пере­менных а, b

.. figure:: 04_if_03.png
       :scale: 100 %
       :align: center
       :alt: asda

::

	y = 1;
	if (x<=0)
		if(x==0)
			y=0;
		else
			y=-1

Общая структура программы на Си++ следующая:

::

	if(a>b)
	{
		с=а;
		a=b;
		b=c;
	}
	cout<<"a=<<a<<"b="<<b;

В данном примере использован составной оператор — последо­вательность операторов, заключенная в фигурные скобки. В Си фигурные скобки выполняют роль операторных скобок



	#include <директива_препроцессора_1>
	#include <директива_препроцессора_2>
	...
	определение_функции_1
	определение_функции_2
	...
	определение_функции_n

	void main()
	{
		определения_объектов;
		исполняемые_операторы;
	}

Пример:

Дано: а, b, с — стороны треугольника. Вычислить S — площадь треугольника. По формуле Герона:

.. math::

	p = \frac{a+b+c}{2}
	
	S = \sqrt{(p(p-a)(p-b)(p-c))}

Листинг "Площадь треугольника"

::

	#include<iostream>
	#include<cmath>
	#include<iomanip>
	
	using namespace std;
	
	int main()
	{
		// Описание переменных	
		float a,b,c,S,p;
		
		//Запрос данных
		cout<<"Введите значения сторон треугольника"<<endl;
		
		//Ввод данных
		cin>>a>>b>>c;
		
		//Вычисление полупериметра
		p=(a+b+c)/2;
		
		//Вычисление площади
		S=sqrt(p*(p-a)*(p-b)*(p-c));
		//---------Вывод результата в консоль-------------
		cout<<"Площадь треугольника: "<<fixed<<setprecision(2)<<S<<endl;
	}

**Комментарии:**
**main** - главная функция со стандартным именем.

**void** обозначает отсутствие какого-либо возвращаемого этой функцией результата, а пустые скобки — отсутствие у нее аргументов. 

Все, что следует после заголовка функции и заключе­но в фигурные скобки, можно назвать телом функции. Первая строка — объявление используемых переменных. Все они плаваю­щего типа **double**. Обратите внимание на то, что объявление пе­ременных заканчивается **точкой с запятой**.

Дальнейшая часть программы — исполняемые операторы. Понятие «оператор» в Си трактуется следующим образом: любое выражение, после которого стоит точка с запятой, вос­принимается компилятором как отдельный оператор. 

*Оператор определяет законченное действие на очередном шаге выполнения программы*.

С точки зрения данного выше определения следующая конструкция в программе является оператором:

**i++;**

Его называют *оператором-выражением*. Если вычисление выражения заканчивается присваиванием, то его можно назвать опера­тором присваивания. В рассматриваемой программе присутствуют два оператора присваивания: вычисления полупериметра (р) и вычисления площади треугольника (S).

В выражении для вычисления площади используется библио­течная функция **sqrt()** — квадратный корень.
Данная функция относится к библиотеке математических функ­ций. Для подключения этой библиотеки к нашей программе ис­пользуется директива препроцессора **#include <math.h>**.
       

