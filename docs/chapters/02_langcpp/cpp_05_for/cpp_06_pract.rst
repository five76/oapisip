Задания для практической работы
--------------------------------

Пример №1 (ex_06_01.cpp)
'''''''''''''''''''''''''

Составить программу разложения натурального числа n на простые множители.

Решение оформить в виде функции **decomposition_number**. Функция принимает в качестве аргумента целое число и возвращает **СТРОКУ** c простыми делителями, разделенных пробелом

.. code-block:: cpp

    ...
    #include <string>
    string decomposition_number(int number)
    {
        string result=""; 
        ...
        return result;
    }

:ref:`ex0601`

Пример №2 (ex_06_02.cpp)
''''''''''''''''''''''''''

1) Составить программу вычисления КОЛИЧЕСТВА делителей при разложении натурального числа n на простые множители.

    Решение оформить в виде функции **count_divider**. Функция принимает в качестве аргумента целое число и 
    возвращает КОЛИЧЕСТВО простых делитей

.. code-block:: cpp

    #include <string>
    int count_divider(int number)
    {
        int result=0;
        //...
        return result;
    }

2) (ДОПОЛНИТЕЛЬНО)
    На промежутке от 0 до 9999 найти число с МАКСИМАЛЬНЫМ количеством делителей
    Решение оформить в виде функции **max_count_divider**. 
    Функция принимает в качестве аргумента целое число и возвращает ЧИСЛО С МАКСИМАЛЬНЫМ КОЛИЧЕСТВОМ простых делитей

3) (ДОПОЛНИТЕЛЬНО)
        На промежутке от 0 до 9999 найти число с МАКСИМАЛЬНЫМ количеством *неповторяющихся* делителей

:ref:`ex0602`

Пример №3 (ex_05_03.cpp)
''''''''''''''''''''''''''
Проверить утверждение о том, что результатами вычислений по формуле х^2 + х + 17 при 0 <= х <= 15 являются простые числа. Все результаты вывести на экран

Пример №4 (ex_05_04.cpp)
''''''''''''''''''''''''''''
Найти наибольшее значение отношения трехзначного числа к сумме его цифр.


Требования к оформлению:

Процесс организовать с помощью функции **check_number**. Функция принимает в качестве аргумента трехзначное **n** и возвращает отношение числа к сумме его цифр

:ref:`ex0504`

Пример №5 (ex_05_05.cpp)
''''''''''''''''''''''''''
Вычислить количество точек с целочисленными координатами, находящихся в круге с радиусом R>0 c центром в точке с координатами x,y.

Требования к оформлению:

Процесс организовать с помощью функции **calc_points**. Функция принимает в качестве аргумента координаты центра и радиус круга, а возвращает количество точек

:ref:`ex0505`


