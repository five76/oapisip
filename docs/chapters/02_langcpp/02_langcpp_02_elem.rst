Элементы языка С++
------------------

Алфавит
"""""""
Алфавит. В алфавит языка Си++ входят:

* латинские буквы: от a до z (строчные) и от А до Z (прописные);
* десятичные цифры: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9;
* специальные символы:" { } , I [ ] ( ) + - / % \ ; ' : = > ! ? < & # ~ ^ . *

К специальным символам относится также пробел. 
В комментариях, строках и символьных константах могут ис­пользоваться и другие знаки (например, русские буквы). 
Комбинации некоторых символов, не разделенных пробелами, интерпретируются как один значимый символ. К ним относятся:

++ — == && || «» >= <= += - = *= / = ?: /* */ //

Идентификаторы
""""""""""""""

Для символического обозначения величин, имен функций и т.п. используются имена или идентификаторы. Идентификаторы в языке Си++ – это последовательность знаков, начинающаяся с буквы или знака подчеркивания. В идентификаторах можно использовать заглавные и строчные латинские буквы, цифры и знак подчеркивания. Длина идентификаторов произвольная. 

**Примеры правильных идентификаторов:**

*abc*
*A12*
*NameOfPerson*
*BYTES_PER_WORD*

.. note:: abc и Abc – два разных идентификатора, т.е. заглавные и строчные буквы различаются. 

**Примеры неправильных идентификаторов:**

12X 
a-b

Служебные слова
"""""""""""""""
Служебные слова в Си++ — это идентификаторы, назначение которых однозначно определено в языке. Они не могут быть использованы как свобод­но выбираемые имена. Полный список служебных слов зависит от реализации языка, т. е. различается для разных компиляторов. Од­нако существует неизменное ядро, которое определено стандар­том Си++.

.. figure:: 02_system_words.png
       :scale: 100 %
       :align: center
       :alt: asda

Прямоугольниками отображены системные программы, а блоки с овальной формой обозначают файлы на входе и на выходе этих программ

.. figure:: 02_compile.png
       :scale: 100 %
       :align: center
       :alt: asda
       
1. С помощью текстового редактора формируется текст про­граммы и сохраняется в файле с расширением срр (example.срр).
2. Осуществляется этап *препроцессорной* обработки, содержа­ние которого определяется *директивами препроцессора*, рас­положенными перед заголовком программы (функции). В част­ности, по директиве **#include** препроцессор подключает к тек­сту программы заголовочные файлы (*.h) стандартных библио­тек.
3. Происходит *компиляция* текста программы на Си++. В ходе компиляции могут быть обнаружены синтаксические ошибки, которые должен исправить программист. В результате успешной компиляции получается объектный код программы в файле с рас­ширением **obj**. Например, **example.obj**.
4. Выполняется этап компоновки с помощью системной про­граммы Компоновщик (Linker). Этот этап еще называют редак­тированием связей. На данном этапе к программе подключаются библиотечные функции. В результате компоновки создается ис­полняемая программа в файле с расширением **ехе**. Например, **example.exe**.

:Компиля́тор: программа, переводящая текст, написанный на языке программирования, в набор машинных кодов
:Компиля́ция: трансляция программы, составленной на исходном языке высокого уровня, в эквивалентную программу на низкоуровневом языке, близком машинному коду (абсолютный код, объектный модуль, иногда на язык ассемблера), выполняемая компилятором.

